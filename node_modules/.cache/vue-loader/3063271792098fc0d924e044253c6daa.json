{"remainingRequest":"/home/aigul/projects/rtsp_stream_v2/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/aigul/projects/rtsp_stream_v2/src/views/drawArea.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/home/aigul/projects/rtsp_stream_v2/src/views/drawArea.vue","mtime":1613877985924},{"path":"/home/aigul/projects/rtsp_stream_v2/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/aigul/projects/rtsp_stream_v2/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/aigul/projects/rtsp_stream_v2/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/aigul/projects/rtsp_stream_v2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/aigul/projects/rtsp_stream_v2/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgpib2R5IHsKICBtYXJnaW46IDA7Cn0KCi5teUNhbnZhcyB7CiAgcG9zaXRpb246IGFic29sdXRlOwogIHdpZHRoOiAxMjgwcHg7CiAgaGVpZ2h0OiA2NDBweDsKICB0b3A6IDEwMHB4OwogIGxlZnQ6IDEwcHg7Cn0K"},{"version":3,"sources":["drawArea.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsIA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","file":"drawArea.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div id=\"app\">\n    <canvas class=\"myCanvas\" id=\"videoCanvas\" style=\"z-index: 10\"/>\n    <div>\n      <canvas ref=\"canvas\" id='drawing-pad' width='1280' height=\"640\" style=\"z-index: 100\" class=\"myCanvas\">\n        This is an interactive drawing pad.\n      </canvas>\n    </div>\n    <div style=\"margin-top: 650px;\"/>\n    <button v-on:click=\"newArea\">Создать область</button>\n    <button v-on:click=\"closeArea\">Замкнуть область</button>\n    <button v-on:click=\"deleteArea\">Удалить область</button>\n  </div>\n</template>\n\n\n<script>\nimport JSMpeg from 'jsmpeg-player'\nconst area_file = require('../../public/data.json');\n\nexport default {\n  name: 'drawArea',\n  components: {},\n  data: () => ({\n    points: [],\n    area_id: 0,\n    i: 0,\n    arr: [],\n    x: null, y: null,\n    canvas: null,\n    context: null,\n    isDrawing: false,\n  }),\n  mounted() {\n    let canvas = document.getElementById('videoCanvas');\n    let url = 'ws://192.168.1.35:5000';\n    let player = new JSMpeg.Player(url, {\n      canvas: canvas,\n      autoplay: true, audio: false, loop: true,\n      onVideoDecode: () => {\n      }\n    })\n\n    this.canvas = this.$refs.canvas\n    this.context = this.canvas.getContext(\"2d\");\n    this.context.lineWidth = 2;\n    this.context.strokeStyle = \"red\";\n    this.context.fillStyle = \"rgba(0,255,255,0.4)\"\n    this.canvas.addEventListener('click', this.click)\n    this.drawFromServer()\n  },\n  methods: {\n    newArea() {\n      this.isDrawing = true;\n    },\n    closeArea: function () {\n      this.isDrawing = false;\n      var area = {\"id\": this.area_id, \"dots\": this.points}\n      this.area_id++;\n      this.arr.push(area)\n\n      // this.writeAreasToFile()\n\n      this.points = []\n      this.i = 0\n      this.x = 0;\n      this.y = 0;\n      this.context.closePath()\n      this.context.fill();\n      this.context.stroke();\n    },\n    deleteArea() {\n      // this.canvas.clear()\n      //  НУЖНО ДОРАБОТАТЬ\n    },\n    pxToProcent(x){\n      var rect = this.canvas.getBoundingClientRect();\n      return (x/rect.width)*100\n    },\n    procentToPx(x){\n      var rect = this.canvas.getBoundingClientRect();\n      return x*rect.width/100\n    },\n    click(e) {\n      console.log(this.isDrawing)\n      if (!this.isDrawing) {\n        this.newArea()\n      }\n      if (this.isDrawing) {\n        var rect = this.canvas.getBoundingClientRect();\n        var x = e.clientX - rect.left\n        var y = e.clientY - rect.top;\n\n        this.points.push({x, y})\n        if (this.i == 0) {\n          this.context.beginPath();\n          this.context.moveTo(x, y);\n        }\n        if (this.i > 0) {\n          this.context.lineTo(x, y);\n          this.context.stroke();\n          if (Math.abs(x - this.points[0].x) < 10 && Math.abs(y - this.points[0].y) < 10) {\n            this.points.pop()\n            this.closeArea()\n            return\n          }\n        }\n\n      }\n      this.i++\n    },\n    drawFromServer() {\n      // this.arr.push(area_file)\n      // this.area_id = this.arr.length\n      // var points\n      // for (var i = 0; i < this.arr.length; i++) {\n      //   points = this.arr[i].dots\n      //   this.context.beginPath()\n      //   this.context.moveTo(points[0].x, points[0].y);\n      //   for (var j = 1; j < points.length; j++) {\n      //     var x = points[j].x\n      //     var y = points[j].y\n      //     this.context.lineTo(x, y);\n      //   }\n      //   this.context.closePath()\n      //   this.context.fill();\n      //   this.context.stroke();\n      // }\n    },\n  }\n}\n</script>\n\n<style>\nbody {\n  margin: 0;\n}\n\n.myCanvas {\n  position: absolute;\n  width: 1280px;\n  height: 640px;\n  top: 100px;\n  left: 10px;\n}\n</style>"]}]}