{"remainingRequest":"/home/aigul/projects/rtsp_stream_v2/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/aigul/projects/rtsp_stream_v2/src/views/plan.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/aigul/projects/rtsp_stream_v2/src/views/plan.vue","mtime":1614288012013},{"path":"/home/aigul/projects/rtsp_stream_v2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/aigul/projects/rtsp_stream_v2/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["plan.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAofile":"plan.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div class=\"plan\">\n    <h2>План помещения:</h2>\n    <div class=\"position-relative\">\n      <b-img class=\"myCanvas\" src=\"/plan1.png\" height=\"400\" width=\"800\"></b-img>\n      <canvas ref=\"canvas\" id='drawing-pad' width='800' height=\"400\" style=\"z-index: 100; border: 2px solid black\"\n              class=\"myCanvas\">\n        This is an interactive drawing pad.\n      </canvas>\n    </div>\n    <div style=\"margin-top: 450px\">\n      <b-button v-on:click=\"this.drawAreas\">Нарисовать области</b-button>\n      <p> Areas: {{areas}}</p>\n      <p>  Cameras: {{cameras}}</p>\n      <p> Controllers: {{controllers}}</p>\n      <p>{{controllers[0].id}}</p>\n    </div>\n  </div>\n</template>\n<script>\nimport axios from \"axios\";\nconst width = 800\nconst height = 400\n\nexport default {\n  name: 'plan',\n  data() {\n    return {\n      // arr: [],\n      // i: 0,\n      // x: null, y: null,\n      canvas: null,\n      context: null,\n      rect: null,\n      areas: [],\n      cameras: [],\n      controllers: [],\n      timer: null``\n    }\n  },\n  mounted() {\n    this.timer = setInterval(this.getAllInfo, 10000)\n    this.getAllInfo()\n\n    this.canvas = this.$refs.canvas\n    this.context = this.canvas.getContext(\"2d\"); //ctx\n    this.context.lineWidth = 2;\n    this.context.strokeStyle = \"blue\"\n    this.context.fillStyle = \"rgba(0,255,255,0.0)\"\n    this.rect = this.canvas.getBoundingClientRect()\n    this.context.beginPath();\n    this.context.moveTo(130, 20);\n    this.context.lineTo(300, 20);\n    this.context.lineTo(250, 120);\n    this.context.closePath()\n    this.context.fill();\n    this.context.stroke();\n    /*\n    this.canvas.addEventListener('click', this.click)\n    // this.drawFromServer()\n    */\n  },\n  beforeDestroy() {\n    clearInterval(this.timer)\n  },\n  methods: {\n    async getAreas() {\n      axios.get('http://192.168.1.104:5000/api/areas')\n          .then(response => (this.areas = response.data));\n    },\n    async getCameras() {\n      axios.get('http://192.168.1.104:5000/api/cameras', {\n        headers: {\"Access-Control-Allow-Origin\": \"*\"}\n      })\n          .then(response => (this.cameras = response.data));\n    },\n    async getControllers() {\n      axios.get('http://192.168.1.104:5000/api/controllers/scan')\n          .then(response => (this.controllers = response.data));\n    },\n    async getAllInfo() {\n      this.getAreas()\n      this.getCameras()\n      this.getControllers()\n    },\n    async drawAreas(){\n      var status, controller, points, str, x, y\n      for (var i=0; i<this.areas.length; i++){\n        controller = this.areas[i].controller_id\n        status = this.controllers.find(contr => contr.id === controller).status\n        points = this.areas[i].coordinates\n        for (var j=0; j< points.length;  j++){\n          str = points[j]\n          str = (str.slice(0, 0) + str.slice(1, str.length-1)).split(',')\n          str[0] = (Number(str[0])*width/100)\n          str[1] = (Number(str[1])*height/100)\n          points[j] = [str[0], str[1]]\n          console.log(points[j])\n          if (j==0) {\n            this.context.beginPath();\n            this.context.moveTo(str[0], str[1]);\n          }\n          else {\n            this.context.lineTo(str[0], str[1]);\n            this.context.stroke();\n          }\n        }\n        this.context.closePath()\n        this.context.fill();\n        this.context.stroke();\n\n        console.log(points)\n        // this.context.fillStyle = `rgba(0,255,255,${status})`\n      }\n    },\n    /*\n    closeArea: function () {\n      this.context.closePath()\n      this.context.fill();\n      this.context.stroke();\n      alert('closeArea')\n    },\n    // choseArea(id) {\n    //   this.context.clearRect(0, 0, this.rect.width, this.rect.height)\n    //   this.drawFromArray(this.arr)\n    //   this.chosenArea = id\n    //   var points = this.arr[id].dots\n    //   this.context.beginPath();\n    //   this.context.moveTo(points[0].x, points[0].y);\n    //   for (var i = 0; i < points.length; i++) {\n    //     this.context.lineTo(points[i].x, points[i].y)\n    //   }\n    //   this.context.closePath()\n    //   this.context.strokeStyle = \"red\"\n    //   this.context.fillStyle = \"rgba(255,0,170, 0.4)\"\n    //   this.context.fill();\n    //   this.context.stroke();\n    //   this.context.strokeStyle = \"blue\"\n    //   this.context.fillStyle = \"rgba(0,255,255,0.4)\"\n    // },\n    // deleteArea(id) {\n    //   this.arr.splice(id, 1)\n    //   this.context.clearRect(0, 0, this.rect.width, this.rect.height)\n    //   this.drawFromArray(this.arr)\n    //   this.chosenArea = -1\n    // },\n    delDrawingArea() {\n      this.arr = []\n      this.i = 0\n      this.x = null\n      this.y = null\n\n      this.context.clearRect(0, 0, this.rect.width, this.rect.height)\n      this.drawFromArray(this.arr)\n    },\n    click(e) {\n      var x = e.clientX - this.rect.left\n      var y = e.clientY - this.rect.top\n      // if (!this.isDrawing) {\n      //   if (this.inside({x, y}, this.arr) != -1) {\n      //     this.choseArea(this.inside({x, y}, this.arr))\n      //   }\n      // } else {\n        this.arr.push({x, y})\n        if (this.i == 0) {\n          this.context.beginPath();\n          this.context.moveTo(x, y);\n        }\n        if (this.i > 0) {\n          this.context.lineTo(x, y);\n          this.context.stroke();\n          if (Math.abs(x - this.arr[0].x) < 10 && Math.abs(y - this.arr[0].y) < 10) {\n            this.closeArea()\n          }\n        }\n        this.i++\n\n    },\n    drawFromArray(arr) {\n      var points\n      for (var i = 0; i < arr.length; i++) {\n        points = arr[i].dots\n        this.context.beginPath()\n        this.context.moveTo(points[0].x, points[0].y);\n        for (var j = 1; j < points.length; j++) {\n          var x = points[j].x\n          var y = points[j].y\n          this.context.lineTo(x, y);\n        }\n        this.context.closePath()\n        this.context.fill();\n        this.context.stroke();\n      }\n    },\n    pxToProcent(x, y) {\n      return {'x': Math.round((x / this.rect.width) * 100), 'y': Math.round((y / this.rect.height) * 100)}\n    },\n    procentToPx(x, y) {\n      return {'x': x * this.rect.width / 100, 'y': y * this.rect.height / 100}\n    },\n    inside(point, vs) {\n      var x = point.x, y = point.y;\n      var inside = false, points = []\n      for (var k = 0; k < vs.length; k++) {\n        points = vs[k].dots\n        for (var i = 0, j = points.length - 1; i < points.length; j = i++) {\n          var xi = points[i].x, yi = points[i].y;\n          var xj = points[j].x, yj = points[j].y;\n\n          var intersect = ((yi > y) != (yj > y))\n              && (x < (xj - xi) * (y - yi) / (yj - yi) + xi);\n          if (intersect) inside = !inside;\n        }\n        if (inside) {\n          return k\n        }\n      }\n      return -1\n    },\n    arrPxToProc(arr) {\n      console.log(arr.length)\n      var points, arr1 = [], points2 = [], dot\n      for (var i = 0; i < arr.length; i++) {\n        points = arr[i].dots\n        console.log(points, points.length)\n        for (var j = 0; j < points.length; j++) {\n          dot = this.pxToProcent(points[j].x, points[j].y)\n          points2.push(dot)\n        }\n        arr1.push({'id': i, 'dots': points2})\n        points = null\n      }\n      return arr1\n    },*/\n  }\n}\n</script>\n\n<style>\n\n.myCanvas {\n  position: absolute;\n  top: 0px\n}\n</style>"]}]}